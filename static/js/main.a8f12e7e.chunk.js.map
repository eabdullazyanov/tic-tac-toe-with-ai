{"version":3,"sources":["constants.js","utils/index.js","utils/minimaxTree.js","components/Game/utils.js","components/Game/index.jsx","components/MainMenu.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["FIELD_SIZE","CELLS_NUMBER","MAX","MIN","sign","name","APP_STATUS_MAIN_MENU","APP_STATUS_GAME","APP_STATUS_GAME_AS_X","APP_STATUS_GAME_AS_O","hasWon","player","field","rows","cols","diagonals","i","rowIndex","Math","floor","colIndex","max","getOpponent","getBestChildIndex","role","children","reduce","bestI","currentChild","value","generateNextPossibleMoves","node","mutableField","currentPlayer","length","generateChildren","getBestChildValue","minimaxTree","tree","Array","createMinimaxTree","generateEmptyCell","id","shortid","generate","occupiedBy","generateEmptyField","fill","map","Game","ai","returnToMainMenu","useState","gameResult","setGameResult","whoseMove","setWhoseMove","currentMinimaxNode","setCurrentMinimaxNode","updateField","setInitialState","useCallback","makeMove","cellIndex","fieldAfterMove","updatedField","getFieldAfterMove","newMinimaxNode","onCellClick","cellId","findIndex","cell","getCellIndex","makeAiMove","bestMove","useEffect","timer","setTimeout","clearTimeout","className","key","onClick","type","defaultProps","MainMenu","startGame","startGameAsX","startGameAsO","App","appStatus","setAppStatus","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8f12e7e.chunk.js","sourcesContent":["export const FIELD_SIZE = 3;\nexport const CELLS_NUMBER = FIELD_SIZE ** 2;\n\nexport const MAX = 1;\nexport const MIN = -1;\n\nexport const sign = {\n  [MAX]: '✕',\n  [MIN]: '○',\n};\nexport const name = {\n  [MAX]: 'Player 1',\n  [MIN]: 'Player 2',\n};\n\nexport const AI_DELAY = 500;\n\n// App status\nexport const APP_STATUS_MAIN_MENU = 'APP_STATUS_MAIN_MENU';\nexport const APP_STATUS_GAME = 'APP_STATUS_GAME';\nexport const APP_STATUS_GAME_AS_X = 'APP_STATUS_GAME_AS_X';\nexport const APP_STATUS_GAME_AS_O = 'APP_STATUS_GAME_AS_O';\n","import {\n  FIELD_SIZE, CELLS_NUMBER, MAX, MIN,\n} from '../constants';\n\nexport function hasWon(player, field) {\n  const rows = [0, 0, 0];\n  const cols = [0, 0, 0];\n  const diagonals = [0, 0];\n  for (let i = 0; i < CELLS_NUMBER; i++) {\n    if (field[i] !== player) continue;\n\n    const rowIndex = Math.floor(i / FIELD_SIZE);\n    const colIndex = i % FIELD_SIZE;\n\n    rows[rowIndex]++;\n    cols[colIndex]++;\n    if (colIndex === rowIndex) diagonals[0]++;\n    if (colIndex + rowIndex === FIELD_SIZE - 1) diagonals[1]++;\n  }\n\n  return Math.max(...rows, ...cols, ...diagonals) === FIELD_SIZE;\n}\n\nexport const getOpponent = player => (player === MAX ? MIN : MAX);\n\nexport function getBestChildIndex(role, children) {\n  if (!children) return null;\n\n  return children.reduce((bestI, currentChild, i) => {\n    if (bestI === null) return i;\n    if (role === MAX && currentChild.value > children[bestI].value) return i;\n    if (role === MIN && currentChild.value < children[bestI].value) return i;\n\n    return bestI;\n  }, null);\n}\n\nexport function getBestChildValue(role, children) {\n  const index = getBestChildIndex(role, children);\n  return children[index].value;\n}\n","/* eslint-disable no-param-reassign */\n\nimport { CELLS_NUMBER, MAX } from '../constants';\nimport { hasWon, getOpponent, getBestChildValue } from '.';\n\nfunction generateChildren(mutableField, currentPlayer) {\n  const children = [];\n\n  for (let i = 0; i < mutableField.length; i++) {\n    if (mutableField[i] != null) continue;\n    mutableField[i] = currentPlayer;\n    children[i] = {};\n    if (hasWon(currentPlayer, mutableField)) {\n      children[i].value = currentPlayer;\n    } else {\n      generateNextPossibleMoves(children[i], mutableField, getOpponent(currentPlayer));\n    }\n    mutableField[i] = null;\n  }\n\n  return children;\n}\n\nfunction generateNextPossibleMoves(node, mutableField, currentPlayer) {\n  const children = generateChildren(mutableField, currentPlayer);\n\n  if (children.length === 0) {\n    node.value = 0;\n  } else {\n    node.value = getBestChildValue(currentPlayer, children);\n    node.children = children;\n  }\n}\n\nfunction createMinimaxTree() {\n  const mutableField = new Array(CELLS_NUMBER);\n  const tree = {};\n  generateNextPossibleMoves(tree, mutableField, MAX);\n\n  return tree;\n}\n\nconst minimaxTree = createMinimaxTree();\n\nexport default minimaxTree;\n","import shortid from 'shortid';\n\nimport { CELLS_NUMBER } from '../../constants';\n\nconst generateEmptyCell = () => ({\n  id: shortid.generate(),\n  occupiedBy: null,\n});\nexport const generateEmptyField = () => new Array(CELLS_NUMBER).fill(null).map(generateEmptyCell);\n\nexport const getCellIndex = (id, field) => field.findIndex(cell => cell.id === id);\n\nexport function getFieldAfterMove(field, whoseMove, cellIndex) {\n  const updatedField = [...field];\n\n  updatedField[cellIndex] = {\n    ...updatedField[cellIndex],\n    occupiedBy: whoseMove,\n  };\n\n  return updatedField;\n}\n\nexport const isGameOver = minimaxNode => minimaxNode.children == null;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  MAX, sign, name, AI_DELAY,\n} from '../../constants';\nimport minimaxTree from '../../utils/minimaxTree';\nimport { getOpponent, getBestChildIndex } from '../../utils';\nimport {\n  generateEmptyField, getCellIndex, getFieldAfterMove, isGameOver,\n} from './utils';\n\nconst Game = ({ ai, returnToMainMenu }) => {\n  const [gameResult, setGameResult] = useState(null);\n  const [whoseMove, setWhoseMove] = useState(MAX);\n  const [currentMinimaxNode, setCurrentMinimaxNode] = useState(minimaxTree);\n  const [field, updateField] = useState(() => generateEmptyField());\n\n  const setInitialState = useCallback(() => {\n    setGameResult(null);\n    setWhoseMove(MAX);\n    setCurrentMinimaxNode(minimaxTree);\n    updateField(generateEmptyField());\n  }, []);\n\n  const makeMove = useCallback((cellIndex) => {\n    const fieldAfterMove = getFieldAfterMove(field, whoseMove, cellIndex);\n    updateField(fieldAfterMove);\n\n    const newMinimaxNode = currentMinimaxNode.children[cellIndex];\n    setCurrentMinimaxNode(newMinimaxNode);\n\n    if (isGameOver(newMinimaxNode)) {\n      setGameResult(newMinimaxNode.value);\n    } else {\n      setWhoseMove(getOpponent(whoseMove));\n    }\n  }, [field, whoseMove, currentMinimaxNode]);\n\n  const onCellClick = useCallback((cellId) => {\n    if (whoseMove === ai) return;\n\n    const cellIndex = getCellIndex(cellId, field);\n    if (field[cellIndex].occupiedBy == null) makeMove(cellIndex);\n  }, [field, whoseMove, ai, makeMove]);\n\n  const makeAiMove = useCallback(() => {\n    const bestMove = getBestChildIndex(ai, currentMinimaxNode.children);\n    makeMove(bestMove);\n  }, [currentMinimaxNode, ai, makeMove]);\n\n  useEffect(() => {\n    if (whoseMove !== ai || gameResult != null) return undefined;\n\n    const timer = setTimeout(makeAiMove, AI_DELAY);\n\n    return () => clearTimeout(timer);\n  }, [whoseMove, gameResult, ai, currentMinimaxNode, makeAiMove]);\n\n  return (\n    <div className=\"game\">\n      <div className=\"field\">\n        {field.map(({ occupiedBy, id }) => (\n          <div key={id} className=\"cell\" onClick={() => onCellClick(id)}>\n            {occupiedBy != null && sign[occupiedBy]}\n          </div>\n        ))}\n      </div>\n      <div className=\"statusBar\">\n        {\n        gameResult == null\n          ? (\n            <div>\n              {`${name[whoseMove]}'s turn (${sign[whoseMove]})`}\n            </div>\n          )\n          : ' '\n        }\n      </div>\n      {gameResult != null && (\n        <div className=\"gameOver\">\n          <div className=\"message\">\n            {\n              gameResult === 0\n                ? 'Tie!'\n                : `${name[gameResult]} win!`\n            }\n          </div>\n          <button type=\"button\" onClick={setInitialState}>Play again</button>\n          <button type=\"button\" onClick={returnToMainMenu}>Main Menu</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nGame.propTypes = {\n  ai: PropTypes.number,\n  returnToMainMenu: PropTypes.func.isRequired,\n};\n\nGame.defaultProps = {\n  ai: null,\n};\n\nexport default Game;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MainMenu = ({ startGame, startGameAsX, startGameAsO }) => (\n  <div className=\"mainMenu\">\n    <div className=\"gameTitle\">Tic Tac Toe</div>\n    <button type=\"button\" onClick={startGameAsX}>1 Player as X</button>\n    <button type=\"button\" onClick={startGameAsO}>1 Player as O</button>\n    <button type=\"button\" onClick={startGame}>2 Players</button>\n  </div>\n);\n\nMainMenu.propTypes = {\n  startGame: PropTypes.func.isRequired,\n  startGameAsX: PropTypes.func.isRequired,\n  startGameAsO: PropTypes.func.isRequired,\n};\n\nexport default MainMenu;\n","import React, { useState, useCallback } from 'react';\nimport './App.css';\nimport Game from './components/Game';\nimport MainMenu from './components/MainMenu';\nimport {\n  APP_STATUS_MAIN_MENU, APP_STATUS_GAME, APP_STATUS_GAME_AS_X, APP_STATUS_GAME_AS_O, MIN, MAX,\n} from './constants';\n\nfunction App() {\n  const [appStatus, setAppStatus] = useState(APP_STATUS_MAIN_MENU);\n\n  const startGame = useCallback(() => setAppStatus(APP_STATUS_GAME), []);\n  const startGameAsX = useCallback(() => setAppStatus(APP_STATUS_GAME_AS_X), []);\n  const startGameAsO = useCallback(() => setAppStatus(APP_STATUS_GAME_AS_O), []);\n  const returnToMainMenu = useCallback(() => setAppStatus(APP_STATUS_MAIN_MENU), []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"appInner\">\n        {(() => {\n          switch (appStatus) {\n            case APP_STATUS_MAIN_MENU: return (\n              <MainMenu\n                startGame={startGame}\n                startGameAsX={startGameAsX}\n                startGameAsO={startGameAsO}\n              />\n            );\n            case APP_STATUS_GAME: return <Game returnToMainMenu={returnToMainMenu} />;\n            case APP_STATUS_GAME_AS_X: return <Game ai={MIN} returnToMainMenu={returnToMainMenu} />;\n            case APP_STATUS_GAME_AS_O: return <Game ai={MAX} returnToMainMenu={returnToMainMenu} />;\n            default: return null;\n          }\n        })()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}